# git version 2.23.0

[color]
        ui = auto

[core]
        editor = vim
        quotepath = false

[pull]
        ff = only

[diff]
        indentHeuristic = true

[rebase]
        autostash = true

[alias]
        ci = commit -v
        cm = commit -m
        ca = commit -v --amend
        cpa = cherry-pick --abort
        cpc = cherry-pick --continue
        f = fetch --prune
        fa = fetch --all --prune
        lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        ra = rebase --abort
        rc = rebase --continue
        rv = remote -v
        p = pull
        st = status
        s = stash
        su = submodule foreach git pull origin master
        co = checkout
        cb = checkout -b
        bm = branch -m
        au = add -u
        rst = reset --soft HEAD^
        hr = cm '---' --allow-empty

        # for script
        bsc = branch --show-current
        dno = diff --name-only
        sts = status --short
        # branch point
        bpt = "!f() {\
          local current=$(git bsc) && \
          local src=$(git b) && \
          git log --oneline --reverse origin/${src}..origin/${current} | \
          head -n 1; \
        }; f"

        # branch list (multi)
        bmul = "!f() { \
          git branch | \
          cut -c 3- | \
          fzf -m --preview \"git log --color=always {}\" | \
          xargs echo; \
        }; f"

        # merged branch list (multi)
        bmergedmul = "!f() { \
          git branch --merged master | \
          cut -c 3- | \
          fzf -m --preview \"git log --color=always {}\" | \
          xargs echo; \
        }; f"

        # push
        ps = "!f() { \
          local current=$(git bsc) && \
          if [[ ! \"${current}\" = 'master' ]]; then \
            git push -u origin ${current}; \
          else \
            echo 'DO NOT PUSH FOR MASTER'; \
          fi; \
        }; f"

        # diff
        d  = "!f() { \
          git dno | \
          uniq | \
          fzf --preview \"git diff --color=always {}\" >/dev/null; \
        }; f"

        # diff --cached
        dc = "!f() { \
          git dno --cached | \
          uniq | \
          fzf --preview \"git diff --cached --color=always {}\" >/dev/null; \
        }; f"

        # add
        a  = "!f() { \
          git sts | \
          grep -E '^\\sM|^MM|^\\?|^UU|^AM|^AD|^\\sD' | \
          cut -c 4- | \
          fzf -m --preview \"git diff --color=always {}\" | \
          xargs git add; \
          git status; \
        }; f"

        # add --patch
        ap = "!f() { \
          target=$( \
            git sts | \
            grep -E '^\\sM|^MM|^\\?|^UU|^AM|^\\sD' | \
            cut -c 4- \
            fzf --preview \"git diff --color=always {}\" | \
          ); \
          git add -p ${target}; \
          git status; \
        }; f"

        # unstage
        us = "!f() { \
          git dno --cached | \
          fzf -m --preview \"git diff --cached --color=always {}\" | \
          xargs git reset HEAD; \
          git status; \
        }; f"

        # restore
        cr  = "!f() { \
          git sts | \
          grep -E '^\\sM|^MM|^\\sD' | \
          cut -c 4- | \
          fzf -m --preview \"git diff --color=always {}\" | \
          xargs git restore; \
          git status; \
        }; f"

        # branch list
        b = "!f() { \
          git branch | \
          cut -c 3- | \
          fzf --preview \"git log --color=always {}\" | \
          xargs echo; \
        }; f"

        # branch
        br = "!f() { \
          git b | \
          xargs git co; \
        }; f"

        # branch -D
        bD = "!f() { \
          git bmul | \
          xargs git branch -D; \
        }; f"

        # merged branch -D
        bDm = "!f() { \
          git bmergedmul | \
          xargs git branch -D; \
        }; f"

        # squashed branch -D
        bDs = "!f() { \
          sh $HOME/.dotfiles/scripts/git-squashed-branches.sh | \
          fzf -m --preview \"git log --color=always {}\" | \
          xargs git branch -D; \
        }; f"

        # branch --all
        ba = "!f() { \
          git fetch --prune; \
          local name=$( \
            git branch -a | \
            grep -E '^\\s*remotes' | \
            cut -c 3- | \
            fzf --preview \"git log --color=always {}\"; \
          ); \
          local _b=${name#remotes/}; \
          local b=${_b#origin/}; \
          git cb ${b} ${_b}; \
        }; f"

        # cherry-pick
        cp = "!f() { \
          local current=$(git bsc) && \
          local target=$(git b) && \
          git co ${target} && \
          local hash=$( \
            git log \
              --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr)' \
              --abbrev-commit \
              --date=relative | \
            fzf -m --preview \"echo {} | xargs git show\" | \
            cut -c -7 | \
            tail -r \
          ) && \
          git co ${current} && \
          git cherry-pick -m 1 ${hash}; \
          stty sane; \
        }; f"

        # update & cherry-pick
        ucp = "!f() { \
          current=$(git bsc) && \
          target=$(git u) && \
          git co ${target} && \
          hash=$( \
            git log \
              --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr)' \
              --abbrev-commit \
              --date=relative | \
            fzf -m --preview \"echo {} | xargs git show\" | \
            cut -c -7 | \
            tail -r \
          ) && \
          git co ${current} && \
          git cherry-pick -m 1 ${hash}; \
          stty sane; \
        }; f"

        # update branch
        u = "!f() { \
          current=$(git bsc) && \
          target=$(git b) && \
          git co ${target} >/dev/null && \
          git pull >/dev/null && \
          git co ${current} >/dev/null && \
          echo ${target}; \
        }; f"

        # rebase -i
        ri = "!f() { \
          target=$(git l) && \
          echo ${target} | \
          cut -d ' ' -f 1 | \
          xargs git rebase -i --autosquash && \
          stty sane; \
        }; f"

        # update & rebase -i
        uri = "!f() { \
          target=$(git u) && \
          git rebase -i --autosquash ${target} && \
          stty sane; \
        }; f"

        # revert
        re = "!f() { \
          target=$(git l) && \
          echo ${target} | \
          cut -d ' ' -f 1 | \
          xargs git revert -m 1; \
        }; f"

        # log
        l  = "!f() { \
          git log \
            --pretty=format:'%h - %s(%cr)' \
            --abbrev-commit \
            --date=relative | \
          fzf --preview \"echo {} | cut -c -7 | xargs git show --color=always\"; \
        }; f"

        ln = "!f() { \
          git log \
            --pretty=format:'%h - %s(%cr)' \
            --abbrev-commit \
            --date=relative | \
          fzf --preview \"echo {} | cut -c -7 | xargs git show --name-only --color=always\"; \
        }; f"

        # log -p
        # log -S
        # grep
        # code
        code = "!f() { \
          git sts | \
          uniq | \
          fzf --preview \"git diff --color=always {}\" | \
          cut -c 4- | \
          xargs code; \
        }; f"

        # commit --fixup
        cf = "!f() { \
          target=$(git l) && \
          echo ${target} | \
          cut -d ' ' -f 1 | \
          xargs git commit --fixup && \
          stty sane; \
        }; f"
